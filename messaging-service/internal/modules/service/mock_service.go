// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package service is a generated GoMock package.
package service

import (
	models "messaging-service/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMessages is a mock of Messages interface.
type MockMessages struct {
	ctrl     *gomock.Controller
	recorder *MockMessagesMockRecorder
}

// MockMessagesMockRecorder is the mock recorder for MockMessages.
type MockMessagesMockRecorder struct {
	mock *MockMessages
}

// NewMockMessages creates a new mock instance.
func NewMockMessages(ctrl *gomock.Controller) *MockMessages {
	mock := &MockMessages{ctrl: ctrl}
	mock.recorder = &MockMessagesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessages) EXPECT() *MockMessagesMockRecorder {
	return m.recorder
}

// DeleteMessage mocks base method.
func (m *MockMessages) DeleteMessage(chatID, msgID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", chatID, msgID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockMessagesMockRecorder) DeleteMessage(chatID, msgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockMessages)(nil).DeleteMessage), chatID, msgID)
}

// GetMessages mocks base method.
func (m *MockMessages) GetMessages(chatId int64) ([]models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", chatId)
	ret0, _ := ret[0].([]models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockMessagesMockRecorder) GetMessages(chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockMessages)(nil).GetMessages), chatId)
}

// SendMessage mocks base method.
func (m *MockMessages) SendMessage(chatId, senderId int64, content string) (*models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", chatId, senderId, content)
	ret0, _ := ret[0].(*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessagesMockRecorder) SendMessage(chatId, senderId, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessages)(nil).SendMessage), chatId, senderId, content)
}

// MockChats is a mock of Chats interface.
type MockChats struct {
	ctrl     *gomock.Controller
	recorder *MockChatsMockRecorder
}

// MockChatsMockRecorder is the mock recorder for MockChats.
type MockChatsMockRecorder struct {
	mock *MockChats
}

// NewMockChats creates a new mock instance.
func NewMockChats(ctrl *gomock.Controller) *MockChats {
	mock := &MockChats{ctrl: ctrl}
	mock.recorder = &MockChatsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChats) EXPECT() *MockChatsMockRecorder {
	return m.recorder
}

// CreateChat mocks base method.
func (m *MockChats) CreateChat(chat models.Chat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", chat)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateChat indicates an expected call of CreateChat.
func (mr *MockChatsMockRecorder) CreateChat(chat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockChats)(nil).CreateChat), chat)
}

// DeleteChat mocks base method.
func (m *MockChats) DeleteChat(chatID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChat", chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChat indicates an expected call of DeleteChat.
func (mr *MockChatsMockRecorder) DeleteChat(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChat", reflect.TypeOf((*MockChats)(nil).DeleteChat), chatID)
}

// GetChatInfo mocks base method.
func (m *MockChats) GetChatInfo(chatID int64) (*models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatInfo", chatID)
	ret0, _ := ret[0].(*models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatInfo indicates an expected call of GetChatInfo.
func (mr *MockChatsMockRecorder) GetChatInfo(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatInfo", reflect.TypeOf((*MockChats)(nil).GetChatInfo), chatID)
}

// GetChats mocks base method.
func (m *MockChats) GetChats() (*[]models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChats")
	ret0, _ := ret[0].(*[]models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChats indicates an expected call of GetChats.
func (mr *MockChatsMockRecorder) GetChats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChats", reflect.TypeOf((*MockChats)(nil).GetChats))
}
