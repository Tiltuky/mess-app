// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: geolocation.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GeolocationService_UpdateGeolocation_FullMethodName    = "/geolocation.GeolocationService/UpdateGeolocation"
	GeolocationService_FindNearbyUsers_FullMethodName      = "/geolocation.GeolocationService/FindNearbyUsers"
	GeolocationService_GetUserLocation_FullMethodName      = "/geolocation.GeolocationService/GetUserLocation"
	GeolocationService_ShareLocation_FullMethodName        = "/geolocation.GeolocationService/ShareLocation"
	GeolocationService_StopSharingLocation_FullMethodName  = "/geolocation.GeolocationService/StopSharingLocation"
	GeolocationService_SetLocationPrivacy_FullMethodName   = "/geolocation.GeolocationService/SetLocationPrivacy"
	GeolocationService_GetLocationHistory_FullMethodName   = "/geolocation.GeolocationService/GetLocationHistory"
	GeolocationService_ClearLocationHistory_FullMethodName = "/geolocation.GeolocationService/ClearLocationHistory"
)

// GeolocationServiceClient is the client API for GeolocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Определение сервиса GeolocationService
type GeolocationServiceClient interface {
	// Обновление геолокации текущего пользователя
	UpdateGeolocation(ctx context.Context, in *UpdateGeolocationRequest, opts ...grpc.CallOption) (*UpdateGeolocationResponse, error)
	// Поиск пользователей поблизости
	FindNearbyUsers(ctx context.Context, in *FindNearbyUsersRequest, opts ...grpc.CallOption) (*FindNearbyUsersResponse, error)
	// Получение текущей геолокации пользователя по его ID
	GetUserLocation(ctx context.Context, in *GetUserLocationRequest, opts ...grpc.CallOption) (*GetUserLocationResponse, error)
	// Поделиться своей геолокацией с другим пользователем
	ShareLocation(ctx context.Context, in *ShareLocationRequest, opts ...grpc.CallOption) (*ShareLocationResponse, error)
	// Прекратить делиться своей геолокацией с другим пользователем
	StopSharingLocation(ctx context.Context, in *StopSharingLocationRequest, opts ...grpc.CallOption) (*StopSharingLocationResponse, error)
	// Настройка конфиденциальности геолокации
	SetLocationPrivacy(ctx context.Context, in *SetLocationPrivacyRequest, opts ...grpc.CallOption) (*SetLocationPrivacyResponse, error)
	// Получение истории геолокаций текущего пользователя
	GetLocationHistory(ctx context.Context, in *GetLocationHistoryRequest, opts ...grpc.CallOption) (*GetLocationHistoryResponse, error)
	// Очистка истории геолокаций текущего пользователя
	ClearLocationHistory(ctx context.Context, in *ClearLocationHistoryRequest, opts ...grpc.CallOption) (*ClearLocationHistoryResponse, error)
}

type geolocationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGeolocationServiceClient(cc grpc.ClientConnInterface) GeolocationServiceClient {
	return &geolocationServiceClient{cc}
}

func (c *geolocationServiceClient) UpdateGeolocation(ctx context.Context, in *UpdateGeolocationRequest, opts ...grpc.CallOption) (*UpdateGeolocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGeolocationResponse)
	err := c.cc.Invoke(ctx, GeolocationService_UpdateGeolocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geolocationServiceClient) FindNearbyUsers(ctx context.Context, in *FindNearbyUsersRequest, opts ...grpc.CallOption) (*FindNearbyUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindNearbyUsersResponse)
	err := c.cc.Invoke(ctx, GeolocationService_FindNearbyUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geolocationServiceClient) GetUserLocation(ctx context.Context, in *GetUserLocationRequest, opts ...grpc.CallOption) (*GetUserLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserLocationResponse)
	err := c.cc.Invoke(ctx, GeolocationService_GetUserLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geolocationServiceClient) ShareLocation(ctx context.Context, in *ShareLocationRequest, opts ...grpc.CallOption) (*ShareLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShareLocationResponse)
	err := c.cc.Invoke(ctx, GeolocationService_ShareLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geolocationServiceClient) StopSharingLocation(ctx context.Context, in *StopSharingLocationRequest, opts ...grpc.CallOption) (*StopSharingLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopSharingLocationResponse)
	err := c.cc.Invoke(ctx, GeolocationService_StopSharingLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geolocationServiceClient) SetLocationPrivacy(ctx context.Context, in *SetLocationPrivacyRequest, opts ...grpc.CallOption) (*SetLocationPrivacyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetLocationPrivacyResponse)
	err := c.cc.Invoke(ctx, GeolocationService_SetLocationPrivacy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geolocationServiceClient) GetLocationHistory(ctx context.Context, in *GetLocationHistoryRequest, opts ...grpc.CallOption) (*GetLocationHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLocationHistoryResponse)
	err := c.cc.Invoke(ctx, GeolocationService_GetLocationHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geolocationServiceClient) ClearLocationHistory(ctx context.Context, in *ClearLocationHistoryRequest, opts ...grpc.CallOption) (*ClearLocationHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearLocationHistoryResponse)
	err := c.cc.Invoke(ctx, GeolocationService_ClearLocationHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeolocationServiceServer is the server API for GeolocationService service.
// All implementations must embed UnimplementedGeolocationServiceServer
// for forward compatibility
//
// Определение сервиса GeolocationService
type GeolocationServiceServer interface {
	// Обновление геолокации текущего пользователя
	UpdateGeolocation(context.Context, *UpdateGeolocationRequest) (*UpdateGeolocationResponse, error)
	// Поиск пользователей поблизости
	FindNearbyUsers(context.Context, *FindNearbyUsersRequest) (*FindNearbyUsersResponse, error)
	// Получение текущей геолокации пользователя по его ID
	GetUserLocation(context.Context, *GetUserLocationRequest) (*GetUserLocationResponse, error)
	// Поделиться своей геолокацией с другим пользователем
	ShareLocation(context.Context, *ShareLocationRequest) (*ShareLocationResponse, error)
	// Прекратить делиться своей геолокацией с другим пользователем
	StopSharingLocation(context.Context, *StopSharingLocationRequest) (*StopSharingLocationResponse, error)
	// Настройка конфиденциальности геолокации
	SetLocationPrivacy(context.Context, *SetLocationPrivacyRequest) (*SetLocationPrivacyResponse, error)
	// Получение истории геолокаций текущего пользователя
	GetLocationHistory(context.Context, *GetLocationHistoryRequest) (*GetLocationHistoryResponse, error)
	// Очистка истории геолокаций текущего пользователя
	ClearLocationHistory(context.Context, *ClearLocationHistoryRequest) (*ClearLocationHistoryResponse, error)
	mustEmbedUnimplementedGeolocationServiceServer()
}

// UnimplementedGeolocationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGeolocationServiceServer struct {
}

func (UnimplementedGeolocationServiceServer) UpdateGeolocation(context.Context, *UpdateGeolocationRequest) (*UpdateGeolocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGeolocation not implemented")
}
func (UnimplementedGeolocationServiceServer) FindNearbyUsers(context.Context, *FindNearbyUsersRequest) (*FindNearbyUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNearbyUsers not implemented")
}
func (UnimplementedGeolocationServiceServer) GetUserLocation(context.Context, *GetUserLocationRequest) (*GetUserLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLocation not implemented")
}
func (UnimplementedGeolocationServiceServer) ShareLocation(context.Context, *ShareLocationRequest) (*ShareLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareLocation not implemented")
}
func (UnimplementedGeolocationServiceServer) StopSharingLocation(context.Context, *StopSharingLocationRequest) (*StopSharingLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSharingLocation not implemented")
}
func (UnimplementedGeolocationServiceServer) SetLocationPrivacy(context.Context, *SetLocationPrivacyRequest) (*SetLocationPrivacyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLocationPrivacy not implemented")
}
func (UnimplementedGeolocationServiceServer) GetLocationHistory(context.Context, *GetLocationHistoryRequest) (*GetLocationHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocationHistory not implemented")
}
func (UnimplementedGeolocationServiceServer) ClearLocationHistory(context.Context, *ClearLocationHistoryRequest) (*ClearLocationHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearLocationHistory not implemented")
}
func (UnimplementedGeolocationServiceServer) mustEmbedUnimplementedGeolocationServiceServer() {}

// UnsafeGeolocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeolocationServiceServer will
// result in compilation errors.
type UnsafeGeolocationServiceServer interface {
	mustEmbedUnimplementedGeolocationServiceServer()
}

func RegisterGeolocationServiceServer(s grpc.ServiceRegistrar, srv GeolocationServiceServer) {
	s.RegisterService(&GeolocationService_ServiceDesc, srv)
}

func _GeolocationService_UpdateGeolocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGeolocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolocationServiceServer).UpdateGeolocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeolocationService_UpdateGeolocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolocationServiceServer).UpdateGeolocation(ctx, req.(*UpdateGeolocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeolocationService_FindNearbyUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNearbyUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolocationServiceServer).FindNearbyUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeolocationService_FindNearbyUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolocationServiceServer).FindNearbyUsers(ctx, req.(*FindNearbyUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeolocationService_GetUserLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolocationServiceServer).GetUserLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeolocationService_GetUserLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolocationServiceServer).GetUserLocation(ctx, req.(*GetUserLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeolocationService_ShareLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolocationServiceServer).ShareLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeolocationService_ShareLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolocationServiceServer).ShareLocation(ctx, req.(*ShareLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeolocationService_StopSharingLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSharingLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolocationServiceServer).StopSharingLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeolocationService_StopSharingLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolocationServiceServer).StopSharingLocation(ctx, req.(*StopSharingLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeolocationService_SetLocationPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLocationPrivacyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolocationServiceServer).SetLocationPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeolocationService_SetLocationPrivacy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolocationServiceServer).SetLocationPrivacy(ctx, req.(*SetLocationPrivacyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeolocationService_GetLocationHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolocationServiceServer).GetLocationHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeolocationService_GetLocationHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolocationServiceServer).GetLocationHistory(ctx, req.(*GetLocationHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeolocationService_ClearLocationHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearLocationHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolocationServiceServer).ClearLocationHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeolocationService_ClearLocationHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolocationServiceServer).ClearLocationHistory(ctx, req.(*ClearLocationHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GeolocationService_ServiceDesc is the grpc.ServiceDesc for GeolocationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeolocationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "geolocation.GeolocationService",
	HandlerType: (*GeolocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateGeolocation",
			Handler:    _GeolocationService_UpdateGeolocation_Handler,
		},
		{
			MethodName: "FindNearbyUsers",
			Handler:    _GeolocationService_FindNearbyUsers_Handler,
		},
		{
			MethodName: "GetUserLocation",
			Handler:    _GeolocationService_GetUserLocation_Handler,
		},
		{
			MethodName: "ShareLocation",
			Handler:    _GeolocationService_ShareLocation_Handler,
		},
		{
			MethodName: "StopSharingLocation",
			Handler:    _GeolocationService_StopSharingLocation_Handler,
		},
		{
			MethodName: "SetLocationPrivacy",
			Handler:    _GeolocationService_SetLocationPrivacy_Handler,
		},
		{
			MethodName: "GetLocationHistory",
			Handler:    _GeolocationService_GetLocationHistory_Handler,
		},
		{
			MethodName: "ClearLocationHistory",
			Handler:    _GeolocationService_ClearLocationHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "geolocation.proto",
}
